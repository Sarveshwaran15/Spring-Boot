üöÄ Understanding the Controller Layer in Spring Boot JDBC
The Controller Layer in Spring Boot is responsible for handling HTTP requests and responses. 
It acts as a bridge between the frontend (client) and the backend (service layer).

üéØ What Does the Controller Layer Do?
1Ô∏è‚É£ Listens for incoming HTTP requests (GET, POST, DELETE, etc.).
2Ô∏è‚É£ Calls the Service Layer to process business logic.
3Ô∏è‚É£ Returns HTTP responses in JSON format.
4Ô∏è‚É£ Uses Spring Boot annotations to map URLs to methods.

Implementation:
package com.example.demo.controller;

import com.example.demo.model.Employee;
import com.example.demo.service.EmployeeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController   //@RestController ‚Üí Marks this class as a REST API controller that returns JSON responses.
@RequestMapping("/employees")   //@RequestMapping("/employees") ‚Üí Sets the base URL for all endpoints in this controller.
public class EmployeeController {

    @Autowired
    private EmployeeService service;

    // Create Employee
    @PostMapping("/add")
    public String addEmployee(@RequestBody Employee employee) {
    //@RequestBody Employee employee ‚Üí Reads JSON input and converts it into an Employee object.
        service.addEmployee(employee);
        return "Employee added successfully!";
    }

    // Get All Employees
    @GetMapping("/all")
    public List<Employee> getAllEmployees() {
        return service.getAllEmployees();
    }

    // Get Employee By ID
    @GetMapping("/{id}")
    public Employee getEmployeeById(@PathVariable int id) {
    //@PathVariable int id ‚Üí Extracts the id from the URL.
        return service.getEmployeeById(id);
    }

    // Delete Employee
    @DeleteMapping("/delete/{id}")
    public String deleteEmployee(@PathVariable int id) {
        service.removeEmployee(id);
        return "Employee deleted successfully!";
    }
}
